#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <limits>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <chrono>

using namespace std;
using namespace std::chrono;

struct Node {
    int π;
    int d;
    int index;
    Node(int idx = -1) : π(-1), d(numeric_limits<int>::max()), index(idx) {}
};

class Graph {
public:
    int numNodes;
    vector<vector<int>> C;
    vector<Node> V;

    Graph(int n = 0) : numNodes(n), C(n, vector<int>(n, numeric_limits<int>::max())), V(n) {
        for (int i = 0; i < n; ++i) {
            V[i] = Node(i);
        }
    }

    void addEdge(int u, int v, int weight) {
        C[u][v] = weight;
    }

    void readFromFile(const string& filename) {
        ifstream file(filename);
        if (file.is_open()) {
            file >> numNodes;
            C.resize(numNodes, vector<int>(numNodes, numeric_limits<int>::max()));
            V.resize(numNodes);
            for (int i = 0; i < numNodes; ++i) {
                for (int j = 0; j < numNodes; ++j) {
                    file >> C[i][j];
                    if (i != j && C[i][j] == 0) {
                        C[i][j] = numeric_limits<int>::max();
                    }
                }
                V[i] = Node(i);
            }
            file.close();
            cout << "\nThe file has been scanned" << endl;
        }
        else {
            cerr << "Unable to open file " << filename << endl;
        }
    }

    void generateRandomGraph(int n) {
        numNodes = n;
        C.resize(numNodes, vector<int>(numNodes, numeric_limits<int>::max()));
        V.resize(numNodes);
        for (int i = 0; i < numNodes; ++i) {
            for (int j = 0; j < numNodes; ++j) {
                if (i != j) {
                    C[i][j] = rand() % 20 + 1;
                }
                else {
                    C[i][j] = 0;
                }
            }
            V[i] = Node(i);
        }
        cout << "\nNew graph has been generated";
    }

    void bellmanFord(int s) {
        for (int i = 0; i < numNodes; ++i) {
            V[i].d = numeric_limits<int>::max();
            V[i].π = -1;
        }
        V[s].d = 0;
        for (int i = 1; i < numNodes; ++i) {
            for (int u = 0; u < numNodes; ++u) {
                for (int v = 0; v < numNodes; ++v) {
                    if (C[u][v] != numeric_limits<int>::max() && V[u].d != numeric_limits<int>::max() && V[u].d + C[u][v] < V[v].d) {
                        V[v].d = V[u].d + C[u][v];
                        V[v].π = u;
                    }
                }
            }
        }
        for (int u = 0; u < numNodes; ++u) {
            for (int v = 0; v < numNodes; ++v) {
                if (C[u][v] != numeric_limits<int>::max() && V[u].d != numeric_limits<int>::max() && V[u].d + C[u][v] < V[v].d) {
                    cerr << "Graph contains a negative-weight cycle" << endl;
                    return;
                }
            }
        }
    }

    void printPath(int s, int v) {
        if (v == s) {
            cout << s + 1 << " ";
        }
        else if (V[v].π == -1) {
            cout << "No path from " << s + 1 << " to " << v + 1 << endl;
        }
        else {
            printPath(s, V[v].π);
            cout << v + 1 << " ";
        }
    }

    void printPathAndCost(int s, int d) {
        if (V[d].π == -1) {
            cout << "No path from " << s + 1 << " to " << d + 1 << endl;
        }
        else {
            cout << "Path: ";
            printPath(s, d);
            cout << "\nCost: " << V[d].d << endl;
        }
    }
};

void printMenu() {
    cout << "\n\n********************************************";
    cout << "\nBellman-Ford algorithm - operation:" << endl;
    cout << "1) Read a graph from the file named graf1.txt" << endl;
    cout << "2) Read a graph from the file named graf2.txt" << endl;
    cout << "3) Generate random graph" << endl;
    cout << "4) Run Bellman-Ford (from node s)" << endl;
    cout << "5) Print cheapest path to node d" << endl << endl;
    cout << "0) Exit" << endl;
    cout << "********************************************\n";

    cout << "Your selection: ";
}

int main() {
    Graph graph;
    int choice;
    int startNode = -1;
    string filename1 = "graf1.txt";
    string filename2 = "graf2.txt";

    while (true) {
        printMenu();
        cin >> choice;
        if (choice == 1) {
            graph.readFromFile(filename1);
        }
        else if (choice == 2) {
            graph.readFromFile(filename2);
        }
        else if (choice == 3) {
            int numNodes;
            cout << "Enter number of nodes (max 1500): ";
            cin >> numNodes;
            if (numNodes > 1500) {
                cout << "Number of nodes exceeds the limit of 1500." << endl;
                continue;
            }
            graph.generateRandomGraph(numNodes);
        }
        else if (choice == 4) {
            cout << "Enter starting node: ";
            cin >> startNode;
            startNode--;
            auto start = high_resolution_clock::now();
            graph.bellmanFord(startNode);
            auto end = high_resolution_clock::now();
            auto duration = duration_cast<nanoseconds>(end - start).count();
            cout << "Time duration: " << duration << " nanoseconds" << endl;
        }
        else if (choice == 5) {
            if (startNode == -1) {
                cout << "Please run Bellman-Ford first by selecting option 4." << endl;
            }
            else {
                int destNode;
                cout << "Enter destination node: ";
                cin >> destNode;
                destNode--;
                graph.printPathAndCost(startNode, destNode);
            }
        }
        else if (choice == 0) {
            cout << "\n    Program has been CLOSED!\n\n" << endl;
            return 0;
        }
        else {
            cout << "\n    Enter a VALID choice!" << endl;
        }
    }
    return 0;
}
